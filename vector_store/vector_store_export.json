[
  {
    "id": "25209b92-1190-4685-ab97-77a5f845e3bf",
    "content": "This script automates a complete CFD simulation workflow in Ansys Fluent using PyFluent, covering meshing, solver setup, and post-processing. It is divided into three main classes: `FluentMeshing`, `FluentSolver`, and `FluentPostProcessor`, and a `run()` function to execute the workflow.",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "e88fe96f-a010-485d-8e8e-82867caa5b4a",
    "content": "1. FluentMeshing\n-----------------\n- Initializes a Fluent session in \"meshing\" mode with GUI and double precision.\n- Sets up a watertight geometry workflow and configures the unit to millimeters.\n- Provides `import_geometry()` to load a geometry file.\n- Provides `setup_meshing()` to run through Fluent meshing tasks: sizing, surface mesh, geometry description, boundary updates, region definition, boundary layers, and volume mesh generation.",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "66b01d53-ef3b-4f24-a072-5e8b984c5c5d",
    "content": "2. FluentSolver\n-----------------\n- Takes the existing meshing session and switches it to the solver mode.\n- Configures gravity, enables energy equations, imports the water-liquid material.\n- Defines velocity inlet boundary conditions using `set_velocity_inlet()`.\n- Runs the solver using `initialize_and_run()` which performs hybrid initialization and executes the simulation for the specified number of iterations.",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "0f2f6c42-1194-4ef7-9cee-b0a4e74d9172",
    "content": "3. FluentPostProcessor\n------------------------\n- Interfaces with the solver to create and save visual outputs.\n- `create_and_save_contour()` sets up contour plots and saves them.\n- `create_plane_slice()` creates a planar slice for visualization.\n- `create_and_save_vector()` creates a vector field display and saves it.",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "c4539ecf-90fd-47bc-9aa9-2323b6b6b106",
    "content": "4. run() Function\n------------------\n- Defines constants like inlet velocity, temperature, and geometry location.\n- Instantiates the `FluentMeshing`, `FluentSolver`, and `FluentPostProcessor` classes.\n- Executes meshing, sets boundary conditions, runs the solver, and post-processes the results (saves velocity and temperature contours and vector plots).\n- Keeps the script alive after simulation until the user presses Enter.",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "64752d55-c458-49e8-bf5c-6a4ad66a5456",
    "content": "This code demonstrates full control of a CFD workflow in Fluent using PyFluent and is ideal for training data in AI-based engineering assistant applications.\n\nimport os\nimport ansys.fluent.core as pyfluent\n\n\nclass FluentMeshing:\n    \"\"\"Handles meshing operations in Fluent.\"\"\"\n\n    def __init__(self):\n        self.session, self.workflow = self.initialize_meshing_session()",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "872d2410-81c6-4d86-b136-a2555ba51d90",
    "content": "@staticmethod\n    def initialize_meshing_session():\n        \"\"\"Launch and initialize the meshing session.\"\"\"\n        meshing_session = pyfluent.launch_fluent(\n            show_gui=True,\n            mode=\"meshing\",\n            precision=\"double\",\n            processor_count=4,\n            additional_arguments=\"-driver opengl\"\n        )\n        workflow = meshing_session.workflow\n        meshing = meshing_session.meshing",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "81640f13-2b33-42c1-bf4a-e2ce1f61f9eb",
    "content": "meshing = meshing_session.meshing\n        workflow.InitializeWorkflow(WorkflowType=r'Watertight Geometry')\n        meshing.GlobalSettings.LengthUnit.set_state(r'mm')\n        return meshing_session, workflow",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "d6ffb74e-f243-474a-a939-e745768357b5",
    "content": "def import_geometry(self, geometry_path):\n        \"\"\"Import the geometry file into the workflow.\"\"\"\n        self.workflow.TaskObject['Import Geometry'].Arguments.set_state({\"FileName\": geometry_path})\n        self.workflow.TaskObject['Import Geometry'].Execute()",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "f9c2b0f0-1abd-41b4-8937-e5b943778db2",
    "content": "def setup_meshing(self):\n        \"\"\"Set up meshing tasks.\"\"\"\n        workflow = self.workflow\n        workflow.TaskObject['Add Local Sizing'].AddChildAndUpdate()\n        workflow.TaskObject['Generate the Surface Mesh'].Execute()\n        workflow.TaskObject['Describe Geometry'].Arguments.set_state(\n            {r'SetupType': r'The geometry consists of only fluid regions with no voids'}\n        )\n        workflow.TaskObject['Describe Geometry'].UpdateChildTasks(SetupTypeChanged=True)",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "ba3f5e63-e92b-4473-936a-0455784aec9c",
    "content": "workflow.TaskObject['Describe Geometry'].Execute()\n        workflow.TaskObject['Update Boundaries'].Execute()\n        workflow.TaskObject['Update Regions'].Execute()\n        workflow.TaskObject['Add Boundary Layers'].Arguments.set_state(\n            {r'LocalPrismPreferences': {r'Continuous': r'Stair Step'}}\n        )\n        workflow.TaskObject['Generate the Volume Mesh'].Execute()",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "c05d83ce-8e03-4666-a7a0-b3f6f3cc61a0",
    "content": "class FluentSolver:\n    \"\"\"Handles solver operations in Fluent.\"\"\"\n\n    def __init__(self, meshing_session):\n        self.solver = self.initialize_solver(meshing_session)",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "363ee706-af40-4db0-b6c0-ed7cb7c342f8",
    "content": "@staticmethod\n    def initialize_solver(meshing_session):\n        \"\"\"Switch to the solver session and initialize settings.\"\"\"\n        solver = meshing_session.switch_to_solver()\n        solver.mesh.check()\n        solver.settings.setup.general.operating_conditions.gravity.enable = True\n        solver.settings.setup.general.operating_conditions.gravity.components = [0.0, -9.81, 0.0]\n        solver.setup.models.energy = {'enabled': True}",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "8e4e2113-377b-4ae8-805a-8da413f09b5b",
    "content": "solver.settings.setup.materials.database.copy_by_name(type=\"fluid\", name=\"water-liquid\")\n        solver.settings.setup.cell_zone_conditions.fluid()\n        return solver",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "39ebb58f-7d78-49ea-87b4-e0e2293ae854",
    "content": "def set_velocity_inlet(self, inlet_name, velocity, temperature):\n        \"\"\"Set velocity inlet boundary conditions.\"\"\"\n        self.solver.settings.setup.boundary_conditions.velocity_inlet[inlet_name](\n            momentum={\n                'velocity_magnitude': {'option': 'value', 'value': velocity}\n            },\n            thermal={\n                'temperature': {'option': 'value', 'value': temperature}\n            },\n        )",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "3db97255-6797-40b1-83ec-8af615dc31b4",
    "content": "def initialize_and_run(self, iterations):\n        \"\"\"Initialize the solver and run calculations.\"\"\"\n        self.solver.solution.initialization.hybrid_initialize()\n        self.solver.settings.solution.run_calculation.iter_count = iterations\n        self.solver.settings.solution.run_calculation.iterate()\n\n\nclass FluentPostProcessor:\n    \"\"\"Handles post-processing operations in Fluent.\"\"\"\n\n    def __init__(self, solver):\n        self.solver = solver",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "7012cc9a-f6e0-4857-804e-24c7ebec7de4",
    "content": "def create_and_save_contour(self, name, field, surfaces_list, file_name):\n        \"\"\"Create, display, and save a contour plot.\"\"\"\n        self.solver.settings.results.graphics.contour.create(name)\n        self.solver.settings.results.graphics.contour[name](\n            field=field,\n            surfaces_list=surfaces_list\n        )\n        self.solver.settings.results.graphics.contour[name].display()\n        self.solver.settings.results.graphics.views.auto_scale()",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "56db2bfa-735f-4206-b1e7-e5529a994d2e",
    "content": "self.solver.settings.results.graphics.picture.save_picture(file_name=file_name)",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "a3ac014c-673e-4a19-b36d-56b45e6e3a0a",
    "content": "def create_plane_slice(self, name, origin, normal):\n        \"\"\"Create a plane slice.\"\"\"\n        self.solver.results.surfaces.plane_slice.create(\n            name=name,\n            origin=origin,\n            normal=normal\n        )",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "76dcc128-aadb-434e-afb9-3487841ef2cd",
    "content": "def create_and_save_vector(self, name, field, surfaces_list, file_name):\n        \"\"\"Create, display, and save a vector plot.\"\"\"\n        graphics = self.solver.settings.results.graphics\n        graphics.vector[name] = {}\n        vector = graphics.vector[name]\n        vector.field = field\n        vector.surfaces_list = surfaces_list\n        vector.style = \"arrow\"\n        vector.display()\n        graphics.views.restore_view(view_name=\"right\")\n        graphics.views.auto_scale()",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "4c9c55d5-14f0-4c04-b7f1-46bea523b4c5",
    "content": "graphics.views.auto_scale()\n        graphics.picture.save_picture(file_name=file_name)",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "c74b8123-b711-4a49-b56e-2ad66f5b176d",
    "content": "def run():\n    # Constants\n    inlet_velocity = 2.0\n    inlet_1_name = \"velocity-inlet-1\"\n    inlet_2_name = \"velocity-inlet-2\"\n    temperature = 300.0\n    iterations = 200\n    geometry_file = \"Static Mixer geometry.dsco\"\n    geometry_path = os.path.join(\"geometry\", geometry_file)\n\n    # Meshing\n    meshing = FluentMeshing()\n    meshing.import_geometry(geometry_path)\n    meshing.setup_meshing()",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "dad0d1f6-625d-48bf-aecc-b2194cae8e42",
    "content": "# Solver\n    solver = FluentSolver(meshing.session)\n    solver.set_velocity_inlet(inlet_1_name, inlet_velocity, temperature)\n    solver.set_velocity_inlet(inlet_2_name, inlet_velocity, temperature)\n    solver.initialize_and_run(iterations)",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "f75f7816-e774-4d44-b1f8-28244ac76538",
    "content": "# Post-processing\n    post_processor = FluentPostProcessor(solver.solver)\n    post_processor.create_and_save_contour(\n        \"velocity_contour\", \"velocity-magnitude\", [\"pressure-outlet\"], \"velocity.png\"\n    )\n    post_processor.create_and_save_contour(\n        \"temperature_contour\", \"temperature\", [\"pressure-outlet\"], \"temperature.png\"\n    )\n    post_processor.create_plane_slice(\"center_yz_plane\", origin=[0.0, 0.0, 0.0], normal=[1.0, 0.0, 0.0])\n    post_processor.create_and_save_contour(",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "4ac0f3ce-0f2c-4d87-9320-77fca9b0a480",
    "content": "post_processor.create_and_save_contour(\n        \"yz_plane_velocity\", \"velocity-magnitude\", [\"center_yz_plane\"], \"yz_plane_velocity.png\"\n    )\n    post_processor.create_and_save_vector(\n        \"velocity_yz_plane\", \"velocity-magnitude\", [\"center_yz_plane\"], \"velocity_yz_plane.png\"\n    )",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "1e2f8e2a-2901-43ad-8b3d-72308ecc042b",
    "content": "# Keep the script alive interactively\n    input(\"Press Enter to exit and close Fluent session...\")\n\n\nif __name__ == \"__main__\":\n    run()",
    "metadata": {
      "source": "knowledge\\fluent_automation.txt"
    }
  },
  {
    "id": "6ccfa166-fd99-4d23-b5b6-fab76bc10b98",
    "content": "This script automates a complete CFD simulation workflow in Ansys Fluent using PyFluent, covering meshing, solver setup, and post-processing. It is divided into three main classes: `FluentMeshing`, `FluentSolver`, and `FluentPostProcessor`, and a `run()` function to execute the workflow.",
    "metadata": {
      "source": "knowledge\\Fluent_Simulation_Code_Explanation.txt"
    }
  },
  {
    "id": "140d49dd-649b-4b45-805f-86c1fde2fe87",
    "content": "1. FluentMeshing\n-----------------\n- Initializes a Fluent session in \"meshing\" mode with GUI and double precision.\n- Sets up a watertight geometry workflow and configures the unit to millimeters.\n- Provides `import_geometry()` to load a geometry file.\n- Provides `setup_meshing()` to run through Fluent meshing tasks: sizing, surface mesh, geometry description, boundary updates, region definition, boundary layers, and volume mesh generation.",
    "metadata": {
      "source": "knowledge\\Fluent_Simulation_Code_Explanation.txt"
    }
  },
  {
    "id": "9b8352db-81c9-4fef-88b2-6d82985d2ad5",
    "content": "2. FluentSolver\n-----------------\n- Takes the existing meshing session and switches it to the solver mode.\n- Configures gravity, enables energy equations, imports the water-liquid material.\n- Defines velocity inlet boundary conditions using `set_velocity_inlet()`.\n- Runs the solver using `initialize_and_run()` which performs hybrid initialization and executes the simulation for the specified number of iterations.",
    "metadata": {
      "source": "knowledge\\Fluent_Simulation_Code_Explanation.txt"
    }
  },
  {
    "id": "46c7c49a-1bce-4968-be52-9f63e699c866",
    "content": "3. FluentPostProcessor\n------------------------\n- Interfaces with the solver to create and save visual outputs.\n- `create_and_save_contour()` sets up contour plots and saves them.\n- `create_plane_slice()` creates a planar slice for visualization.\n- `create_and_save_vector()` creates a vector field display and saves it.",
    "metadata": {
      "source": "knowledge\\Fluent_Simulation_Code_Explanation.txt"
    }
  },
  {
    "id": "6b592812-b10a-4980-bbed-808dd55d2e83",
    "content": "4. run() Function\n------------------\n- Defines constants like inlet velocity, temperature, and geometry location.\n- Instantiates the `FluentMeshing`, `FluentSolver`, and `FluentPostProcessor` classes.\n- Executes meshing, sets boundary conditions, runs the solver, and post-processes the results (saves velocity and temperature contours and vector plots).\n- Keeps the script alive after simulation until the user presses Enter.",
    "metadata": {
      "source": "knowledge\\Fluent_Simulation_Code_Explanation.txt"
    }
  },
  {
    "id": "8495e165-4334-4297-b1cf-e01eed0744bd",
    "content": "This code demonstrates full control of a CFD workflow in Fluent using PyFluent and is ideal for training data in AI-based engineering assistant applications.",
    "metadata": {
      "source": "knowledge\\Fluent_Simulation_Code_Explanation.txt"
    }
  },
  {
    "id": "9f0d361a-f5c9-43a2-8a5b-f3bd64e0a6d3",
    "content": "Chapter 9: Performing Parametric Analyses in Ansys Fluent\n This tutorial is divided into the following sections:\n 9.1. Introduction\n 9.2. Prerequisites\n 9.3. Problem Description\n 9.4. Setup and Solution\n 9.5. Summary\n 9.1. Introduction\n This tutorial illustrates how to perform a parametric analysis, or study, of a static mixer simulation\n within Ansys Fluent. The analysis will take an existing Fluent case file with predefined input and output",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "8e5bee9c-cd33-4e49-9c08-c1ae8c273303",
    "content": "parameters, and setup and solve various permutations that analyze a few changes to the parametric\n variables, all within the Fluent interface. For more information about using Fluent to perform a parametric\n analysis, refer to Performing Parametric Studies.\n This tutorial demonstrates how to do the following:\n â€¢ Start with a Fluent case and data file with input and output parameters.\n â€¢ Define a series of additional cases (design points) where each represents a change to one or more",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "d98d1628-ab44-4b7b-ac84-f9fd5eb570cb",
    "content": "the parameters.\n â€¢ Update the series of design points.\n â€¢ Generate a simulation report for each design point.\n â€¢ Review the simulation reports and perform a comparison of the results between design points.\n Related video that demonstrates steps for setting up, solving, and postprocessing a parametric study\n in Fluent:\n 9.2. Prerequisites\n This tutorial is written with the assumption that you have completed one or more of the introductory",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "1f885b82-ce6d-43c5-80e8-f937be4dfc02",
    "content": "tutorials (such as Fluid Flow and Heat Transfer in a Mixing Elbow (p. 181)) found in this manual and that\n you are familiar with the Ansys Fluent tree and ribbon structure. Some steps in the setup and solution\n procedure will not be shown explicitly.\n9.3. Problem Description\n The problem being analyzed involves a static mixer with two inlets and an outlet.\n Figure 9.1: Problem Schematic",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "e6a00720-352b-4f4a-8aa2-394ec0d6d321",
    "content": "Fluid enters through two inlets using conditions described by separate input parameter expressions for\n the fluid velocity magnitude (inlet1_vel and inlet2_vel) and temperature (inlet1_temp and\n inlet2_temp).The fluid exits the outlet of the mixer based on a pressure outlet condition with a\n temperature of 300 Kelvin.\n The input parameter expressions are initially set to the following constant values:\n Input\n Parameter\n Value\n inlet1_vel  5  m/s\n inlet1_temp  300  K\n inlet2_vel  10  m/s",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "2884c77d-4847-4591-a8de-372f432aa2d0",
    "content": "inlet1_temp  300  K\n inlet2_vel  10  m/s\n inlet2_temp  350  K",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "c89d2fcb-6826-458c-afee-583a6223f8fe",
    "content": "9.4. Setup and Solution\n The following sections describe the setup and solution steps for this tutorial:\n 9.4.1. Preparation\n 9.4.2. Mesh\n 9.4.3. Initialize the Parametric Study\n 9.4.4. Add Design Points\n 9.4.5. Set Up Design Point and Parametric Reports\n 9.4.6. Update Design Point Solutions\n 9.4.7. Generate Design Point and Parametric Simulation Reports\n 9.4.8. Compare Design Point Results\n 9.4.1. Preparation\n To prepare for running this tutorial:\n 1. Download the parametric_mixer.zip file",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "de7775be-89aa-4f6e-bc45-6db1da74215b",
    "content": "1. Download the parametric_mixer.zip file \n 2. Unzip parametric_mixer.zip to your working directory.  The files Static_Mixer.cas.h5 and Static_Mixer.dat.h5 can be found in the folder.\n 3. Use the Fluent Launcher to start Ansys Fluent.\n 4.  Select Solution in the top-left selection list to start Fluent in Solution Mode.\n 5.  Select 3D under Dimension.\n 6.  Enable Double Precision under Options.\n 7. Set Solver Processes to 4 under Parallel (Local Machine).",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "0947b705-d748-4eaf-b921-be28f5d6f4b0",
    "content": "9.4.2. Mesh\n 1. Read the case and data file (Static_Mixer.case.h5 and Static_Mixer.dat.h5).\n File â†’ Read â†’ Case & Data...\n As Fluent reads the case/data files, it will report the progress in the console.\n 2. Examine the mesh\n You can use the right mouse button to check which zone number corresponds to each\n boundary. If you click the right mouse button on one of the boundaries in the graphics\n window, its zone number, name, and type will be printed in the Ansys Fluent console.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "e39259dd-260f-480e-83e5-6efcc6f8e655",
    "content": "This feature is especially useful when you have several zones of the same type and you\n want to distinguish between them quickly.\n 9.4.3. Initialize the Parametric Study\n Using you loaded case file with predefined input parameters, you can start the parametric study right\n away.\n 1. Initialize the parametric study.\n Parametric â†’ Study â†’ Initialize\n 2. Create a project file (Static_Mixer.flprj).",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "dc4e6bce-db53-4646-bc22-2f8f41246d6a",
    "content": "2. Create a project file (Static_Mixer.flprj).\n You will need to manage various files that get created for your parametric study, so Fluent will prompt\n you to create a new project file to help manage the files that will be generated for each design point\n run. Click Yes to proceed with creating a project file. Fluent will prompt you for the name and location\n of the project file. For this tutorial, keep the default name as Static_Mixer.flprj and keep the",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "ad0b2621-60b3-4251-9af6-2d78c09c5bb0",
    "content": "location as your current working folder.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "1c5d346f-d085-47ff-ac62-79b00dfc8d05",
    "content": "Note:\n Once you create a project file, you can revisit it at any time by opening the project file\n using the File menu.\n File â†’ Parametric Project â†’ Open...\n\n\n3. Review the elements of the initial parametric study.\n a. The Parametric Study tab that appears contains the Design Point Table with the currently\n loaded case file (the \"base case\") with its input and output parameters.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "af8d88cf-0371-4b8f-8945-75df192f4328",
    "content": "b. The Outline View now contains a Case View with a case-specific outline, along with a\n Parametric Study View that contains access to the details of your case parameters.\n Figure 9.4: The Case View and Parametric Study View for the Initial Static Mixer Case\n\n\n\nc. Review details of the current case. To see the current parametric settings for the case,\n enable the Show Current Case Parameters option under Parametric Study in the\n Preferences dialog (File > Preferences...):",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "c67be0a2-fe02-4c79-891c-07598cb0b6c2",
    "content": "9.4.4. Add Design Points\n Having reviewed the parametric layout within Fluent, you can now add design points to your para\nmetric study. For this tutorial, you will only vary the velocity at one of the two inlets, gradually increas\ning the value to match the velocity at the other inlet. You will also use the design point table to set\n various properties for each design point, such if the solution data is written, or if any simulation report\nspecific data is saved.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "627a3ea1-d21f-4df7-9c73-c02fe0303069",
    "content": "1. Use the Parametric ribbon to add design points to your parametric study.\n Parametric â†’ Design Point â†’ Add Design Point\n Fluent will prompt you to ensure that you want to proceed, informing you that by adding a design\n point, the state of the project will change (in case you wanted to preserve the current state of\n the project). For this tutorial, you can click Continue Adding Design Point.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "2b8c9624-277a-4836-b5d2-2845eb9f8b4d",
    "content": "2. In a similar fashion, add four more design points until you have a total of six, including the base\n design point (Base DP).\n 3. For each design point, make the following changes:",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "f9322ce3-433b-4b76-ad40-75caa793b6fd",
    "content": "Table 9.1: Design Point Settings for the Mixing Tank\n Design Point \t\t\tP2-inlet1_vel\t\t\t Enable Write Data?\n DP1\t\t\t\t6 m/s \t\t\t\t\t yes\n \n DP2\t\t\t\t7 m/s\t\t\t\t\tyes\n\n DP3\t\t\t\t 8 m/s\t\t\t\t\tyes\n\n\n DP4\t\t\t\t9 m/s\t\t\t\t\tyes\n\n\n DP5\t\t\t\t10 m/s\t\t\t\t\tyes\n\n When you later update these design points, Fluent will run each simulation using these settings and\n you will then be able to review their solutions and compare the results of each simulation.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "d75ec05b-f002-4360-b90a-76e22fd7d116",
    "content": "9.4.5. Set Up Design Point and Parametric Reports\n As described in Performing Parametric Studies, Fluent can create simulation reports for your CFD\n analysis. In a similar fashion, each design point run can have their own individual simulation report,\n as well as an overall parametric report.\n Note:\n For this tutorial, you are not making any changes to the settings and organization of\n the reports. If you were to make changes to how your reports are organized, however,",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "fe649d44-1ff7-47cb-bdcd-5161245e6d13",
    "content": "it is a good idea to review and change these settings as needed prior to updating the\n design points in your parametric study.\n 1. Review the settings for the individual design point simulation reports that Fluent will create.\n Parametric â†’ Simulation Report â†’ Design Point Report Settings\n This opens the Simulation Report Outline task page. When the Current Report is set to Design\n Point Settings, you can choose to include or exclude various portions of a typical simulation report",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "65b326ea-6277-479d-9af2-bba037866ed0",
    "content": "using the Report Sections tree.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "d3e6cbb4-f092-49d0-bdc2-b1f6c5cc1f97",
    "content": "For the purposes of this tutorial, you can keep the default settings.\n 2. Review the settings for the overall parametric report.\n When the Current Report is set to Parametric Report, you can choose to include or exclude\n various portions of a typical simulation report using the Report Sections tree.\n Parametric â†’ Simulation Report â†’ Parametric Report",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "b6f8a927-d125-4735-8a7d-588d9f3e0ad5",
    "content": "For any given design point in the design point table, when the Capture Simulation Report Data\n field is enabled, the information flagged in the Simulation Report Outline for that design point will\n appear in the report.\n 9.4.6. Update Design Point Solutions\n Now that the design points have been specified and the report settings have been reviewed, you\n can proceed to running the individual solutions and updating your design points. For this tutorial,",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "979714f9-223e-4fb3-b5d4-81fb8171e798",
    "content": "you will use the default behavior and update each design point sequentially where each design point\n is loaded and solved one after another. You will also see how you can monitor the status of your\n various solutions as they progress.\n 1. Update all of the design points in your study.\n Parametric â†’ Update Options â†’ Update All\n As the calculations for each design point progresses, information is printed to the console and\n the Status column in the Design Point Table updates accordingly",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "62c1333d-14c3-464c-9ce8-5ff4d04e2bcc",
    "content": "You can also check the progress of your solution runs using the Run Status section of the Para\nmetric ribbon.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "ecdf693f-f8d4-4869-a6dd-4832514463a3",
    "content": "2. Monitor the progress of the calculation by viewing its transcript, residual plots, and plots of any\n solution monitors that may exist.\n a. View a transcript of a design point solution by right-clicking on the design point in the table\n and selecting Show > Transcript from the context menu.The transcript will appear below the\n design point table.\n \n b. View a plot of any existing solution monitors by right-clicking on the design point in the table",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "ebe4e976-a42f-4c71-88e4-5a3a2e0078df",
    "content": "and selecting Show > Monitors from the context menu.The monitor plot will appear below\n the design point table. For this tutorial, the original case file already contains a solution mon\nitor definition (one for monitoring the average temperature at the outlet).",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "c65a650c-ded1-4888-b3d4-827cafca97a5",
    "content": "c. View a plot of default residuals of a design point solution by right-clicking on the design point\n in the table and selecting Show > Residuals from the context menu.The residual plot will\n appear below the design point table.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "3f2c8db7-a854-431b-9c84-0e4890dc42ea",
    "content": "9.4.7. Generate Design Point and Parametric Simulation Reports\n Now that your design points are up-to-date in your parametric study, you can create and review\n simulation reports for any or all of your design points.\n 1. Return to the Simulation Report Outline task page to generate an individual simulation report\n for one or more design points.\n Parametric â†’ Simulation Report â†’ Design Point Report Settings",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "b7918e5c-ef03-4c11-840d-16c01fd4fb95",
    "content": "2. Set the Current Report to DP1 Report and click Generate at the bottom of the task page.\n Once generated, the report will be displayed in the Fluent interface, tabbed alongside the\n graphics window.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "2411bdbd-3722-4cd3-8558-8215fa0aae9c",
    "content": "You can perform the same operation for the other design points in the study (DP2 and DP3 for\n instance, and even the Base DP).\n Based on the default selections of what the report is comprised of, the report will have tabulated\n information about a particular design point simulation settings. In addition, the report can include\n plots and animations of the mesh, contours, vectors, and pathlines of common flow field quantities\n (such as temperature, for instance).",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "af8885c9-8e83-4de4-a3b7-68858b9959c6",
    "content": "(such as temperature, for instance).\n 3. Return to the Simulation Report Outline task page to generate an overall parametric report.\n Parametric â†’ Simulation Report â†’ Parametric Report\n 4. Set the Current Report to Parametric Report and click Generate at the bottom of the task page.\n Once generated, the report will be displayed in the Fluent interface, tabbed alongside the\n graphics window.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "ea446034-4e63-42f3-b974-42c6f9a022e1",
    "content": "Based on the default selections of what the report is comprised of, the report will have tabulated\n information about the design points and the base case simulation settings. In addition, the report\n can include plots of the mesh, contours, vectors, and pathlines of common flow field quantities\n (such as temperature, for instance).\n 9.4.8. Compare Design Point Results\n Now that you have results for all design points, you can compare the results as part of your parametric",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "bdee96aa-d608-46ad-86cd-c38e71760315",
    "content": "analysis. You can do this using the Parametric Report or by using Comparison Plots.\n 1. Use parametric reports to compare your results.\n a. Return to the Simulation Report Outline task page to review the overall parametric report.\n Parametric â†’ Simulation Report â†’ Parametric Report\n Set the Current Report to Parametric Report and click View at the bottom of the task page.\n b. In the Parametric Report, go to the Contours section and review the Contours of Static",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "3304a712-4c93-4466-a3f5-25eae18fa7bd",
    "content": "Temperature plot that has been generated and included in the report",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "3360f340-258b-4743-ae25-2e1336dd7195",
    "content": "c. Use the slider to see the contour plot for the different design points in your study.\n\n\nd. Click the Contours Comparison tab to view two plots side-by-side to compare them between\n two different design point values\n\nSince there are multiple contour plots availble in the original analysis, they are also available\n for each design point as well. Click the bottom slider to view other available contour plot\n comparisons between different design points. For instance",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "e378879d-fd32-4219-b004-206275109b1f",
    "content": "For more information about comparing plots in your simulation reports, see Comparing Para\nmetric Results.\n 2. Use comparison plots to compare the input and/or output parameter values as they vary with\n each other or by design point.\n Parametric â†’ Comparison Plot â†’ Create New\n This opens the Parametric Plots dialog box where you can specify the details of a comparison\n plot.\n a. For the Name, enter Exit Temperature vs Inlet Velocity.\n b. For the X Axis, select inlet1_vel.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "61536c07-1ef3-4f3a-a170-f998365b15e5",
    "content": "b. For the X Axis, select inlet1_vel.\n c. For the Y Axis, select outlet-temp-avg-op.\n d. Click Create to visualize the plot under the Design Point Table. A new plot is created in the\n Parametric Study View under Plots.\n e. Close the dialog box.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "64347660-ee77-4c5f-a04e-8bf675f1f9c6",
    "content": "9.5. Summary\n This tutorial demonstrated taking an existing singular Fluent case and data file set with input and output\n parameters and developing a parametric study directly in the Ansys Fluent interface. Variations of those\n input parameters were used to create different solutions for comparative analysis. Individual design\n points were analyzed and simulation reports were generated for each design point and for the parametric",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  },
  {
    "id": "578cb456-ef79-41af-8b27-b720f53a06d4",
    "content": "study itself. Finally, simulation reports and comparative plots were used to examine the changes of an\n input variable per design point. For more information about using Fluent to perform a parametric\n analysis, refer to Performing Parametric Studies.",
    "metadata": {
      "source": "knowledge\\StaticMixertutorial.txt"
    }
  }
]